// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios16.2 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Digioh
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import Digioh
import Foundation
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class WebVC : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var boxId: Swift.UInt?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Digioh.WebVC : WebKit.WKUIDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
}
extension Digioh.WebVC : WebKit.WKNavigationDelegate {
}
public protocol HTTPClient {
  typealias Result = Swift.Result<(Foundation.Data, Foundation.HTTPURLResponse), Swift.Error>
  func get(from url: Foundation.URLRequest, completion: @escaping (Self.Result) -> Swift.Void)
}
public protocol BoxLoader {
  typealias Result = Swift.Result<Digioh.RemoteResponse, Swift.Error>
  func checkShowBoxes(params: Swift.String?, completion: @escaping (Self.Result) -> Swift.Void)
}
final public class DigiohWeb : Digioh.BoxLoader {
  public typealias Result = Swift.Result<Digioh.RemoteResponse, Swift.Error>
  public enum Error : Swift.Error {
    case connectivity
    case invalidData
    public static func == (a: Digioh.DigiohWeb.Error, b: Digioh.DigiohWeb.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(userGId: Swift.String)
  final public func checkShowBoxes(params: Swift.String?, completion: @escaping (Digioh.DigiohWeb.Result) -> Swift.Void)
  final public func showBox(boxId: Swift.UInt, viewController: UIKit.UIViewController)
  @objc deinit
}
public class URLSessionHTTPClient : Digioh.HTTPClient {
  public init(session: Foundation.URLSession = .shared)
  public func get(from url: Foundation.URLRequest, completion: @escaping (Swift.Result<(Foundation.Data, Foundation.HTTPURLResponse), Swift.Error>) -> Swift.Void)
  @objc deinit
}
public struct RemoteResponse : Swift.Codable {
  public let dataSource: Swift.String
  public let message: Swift.String
  public let boxIds: [Swift.UInt]
  public let success: Swift.Bool
  public let code: Swift.String
  public init(boxIds: [Swift.UInt], success: Swift.Bool, message: Swift.String, code: Swift.String, dataSource: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension Digioh.DigiohWeb.Error : Swift.Equatable {}
extension Digioh.DigiohWeb.Error : Swift.Hashable {}
